<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">

    <title>{{ config.site_info.title }}</title>

    <meta name="description" content="{{ config.site_info.description }}">
    <meta name="author" content="{{ config.site_info.author }}">
    
    <meta property="og:title" content="{{ config.site_info.title }}">
    <meta property="og:description" content="{{ config.site_info.description }}">
    <meta property="og:image" content="{{ config.site_info.url + config.site_info.share_image }}">
    <meta property="og:url" content="{{ config.site_info.url }}">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="{{ config.site_info.title }}">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="{{ config.site_info.twitter }}">
    
    <link rel="icon" href="/favicon.ico" sizes="any"><!-- 32x32 (and others in .ico) -->
    <link rel="icon" href="/favicon-16x16.png" type="image/png" sizes="16x16">
    <link rel="icon" href="/favicon-32x32.png" type="image/png" sizes="32x32">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" sizes="180x180">

    <link rel="stylesheet" href="/styles/styles.css">
</head>
<body>
    <section id="bio">
        {{ (config.bio.intro + " " + config.bio.details)|markdown|safe }}
        {{ config.bio.connect|markdown|safe }}
    </section>
    <section id="calendar-chart">
        <div id="filter-controls-area"></div>
        <div id="chart-container"></div>
        <div id="tooltip" class="tooltip"></div>
        <div id="details-panel" class="details-panel"></div>
    </section>
    <section id="footer">
        {{ config.footer.text|markdown|safe }}
    </section>
    <script type="module">

        import { DetailsPanel } from './js/details-panel.js';
        import { CalendarChart } from './js/chart.js';
        import { FilterSystem } from './js/filter-system.js';

        const colorConditions = [
            {
                // Full-size or oversized puzzles get color-4
                condition: (date) => date.records.some(r => r.category === 'puzzle' &&
                    (r.size === 'full-size' || r.size === 'oversized')),
                colorClass: 'color-4'
            },
            {
                // Misc entries get color-3
                condition: (date) => date.records.some(r => r.category === 'misc'),
                colorClass: 'color-3'
            },
            {
                // Any records get color-2
                condition: (date) => date.records.length > 0,
                colorClass: 'color-2'
            },
            {
                // Default gets color-1 (lowest priority)
                condition: () => true,
                colorClass: 'color-1'
            }
        ];

        const tooltipTemplate = (date) => 
            `<strong>${date.date}</strong>\n${
                date.records
                    .filter(r => r.category === 'misc')
                    .map(item => `<strong>${item.publication}</strong> [${item.type}]: ${item.title}`)
                    .join('\n')
            }${
                date.records.filter(r => r.category === 'misc').length > 0 && 
                date.records.filter(r => r.category === 'puzzle').length > 0 ? '\n' : ''
            }${
                date.records
                    .filter(r => r.category === 'puzzle')
                    .map(puzzle => `<strong>${puzzle.publication}</strong>: ${puzzle.title}${
                        puzzle.collaborator ? ` with ${puzzle.collaborator}` : ''
                    } (${puzzle.size}, ${puzzle.type})`)
                    .join('\n')
            }`;

        // Initialize the chart with options
        const chart = new CalendarChart("chart-container", {
            colorConditions: colorConditions,
            tooltipTemplate: tooltipTemplate
        });
        
        // Load and render initial data
        await chart.loadData('/data.json'); // This path will need to be relative to the _site directory
        chart.render();

        const filterConfig = [
            {'id': 'publication', 'label': 'Publication'},
            {'id': 'collaborator', 'label': 'Collaborator', includeAny: true},
            {'id': 'type', 'label': 'Type'}
        ];

        const filterSystem = new FilterSystem(chartData.records, filterConfig);
        filterSystem.populateFilterControls("filter-controls-area");

        const detailsPanelManager = new DetailsPanel('details-panel');
        detailsPanelManager.init(chart);

    </script>
</body>
</html>